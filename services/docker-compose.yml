version: "3.8"

volumes:
  pgdata: 
  kongadata:
  rabbitmq_data:

networks:
  kong-net:
    driver: bridge

services:

  #######################################
  # Postgres: The database used by Kong
  #######################################
  kong-database:
    image: postgres:9.6
    restart: always
    networks:
      - kong-net
    environment:
      POSTGRES_DB: kong
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "kong"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - pgdata:/var/lib/postgresql/data

  #######################################
  # Kong database migration
  #######################################
  kong-migration:
    image: kong:2.0.4
    command: "kong migrations bootstrap"
    restart: on-failure
    networks:
      - kong-net
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: password
    depends_on:
      - kong-database

  #######################################
  # Kong: The API Gateway
  #######################################
  kong:
    image: kong:2.0.4
    restart: always
    networks:
      - kong-net
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: password
      KONG_PROXY_LISTEN: 0.0.0.0:8000
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
    depends_on:
      - kong-migration
    ports:
      - "8000:8000"
  
  #######################################
  # Konga: Kong GUI
  #######################################
  konga:
    image: pantsel/konga
    restart: always
    networks:
        - kong-net
    environment:
      DB_ADAPTER: postgres
      DB_HOST: kong-database
      DB_USER: kong
      DB_PASSWORD: password
      DB_DATABASE: konga_db
    depends_on:
      - kong
    ports:
      - "1337:1337"
    volumes:
      - kongadata:/app/kongadata
  
  ####################################
  # RabbitMQ: The messaging broker   
  ####################################
  rabbitmq:
    image: rabbitmq:3-management
    hostname: esd-rabbit
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes: 
      - rabbitmq_data:/var/lib/rabbitmq


  ####################################
  # Fairprice: The fairprice service
  ####################################
  fairprice:
    build:
      context: ./
      dockerfile: fairprice.Dockerfile
    image: douglastoh/fairprice:uchef
    restart: always
    environment:
      dbURL: 'mysql+pymysql://root:root@host.docker.internal:3306/fairprice'
      PYTHONUNBUFFERED: 1
      
  ####################################
  # Cold Storage: The cold storage service
  ####################################
  coldStorage:
    build:
      context: ./
      dockerfile: coldStorage.Dockerfile
    image: douglastoh/coldstorage:uchef
    restart: always
    environment:
      dbURL: 'mysql+pymysql://root:root@host.docker.internal:3306/coldStorage'
      PYTHONUNBUFFERED: 1

  ####################################
  # Error: The error service
  ####################################
  error:
    build:
      context: ./
      dockerfile: error.Dockerfile
    image: douglastoh/error:uchef
    restart: always
    depends_on:
      - rabbitmq
    environment:
      rabbit_host: rabbitmq
      rabbit_port: 5672
      PYTHONUNBUFFERED: 1
  
  ####################################
  # Order: The order service
  ####################################
  order:
    build:
      context: ./
      dockerfile: order.Dockerfile
    image: douglastoh/order:uchef
    restart: always
    depends_on:
      - fairprice
      - coldStorage
    environment:
      fairprice_url: http://fairprice:5003/supermarketStock
      coldStorage_url: http://coldstorage:5004/supermarketStock
      PYTHONUNBUFFERED: 1
  
  ####################################
  # Notification: The notification service
  ####################################
  notification:
    build:
      context: ./
      dockerfile: notification.Dockerfile
    image: douglastoh/notification:uchef
    restart: always
    environment:
      PYTHONUNBUFFERED: 1

  ####################################
  # Payment: The payment service
  ####################################
  payment:
    build:
      context: ./
      dockerfile: payment.Dockerfile
    image: douglastoh/payment:uchef
    restart: always
    environment:
      PYTHONUNBUFFERED: 1

  ####################################
  # Recipe: The recipe service
  ####################################
  recipe:
    build:
      context: ./
      dockerfile: recipe.Dockerfile
    image: douglastoh/recipe:uchef
    restart: always
    environment:
      PYTHONUNBUFFERED: 1

  ####################################
  # Place Delivery: The place delivery service
  ####################################
  place_delivery:
    build:
      context: ./
      dockerfile: place_delivery.Dockerfile
    image: douglastoh/place_delivery:uchef
    restart: always
    depends_on:
      - fairprice
      - coldStorage
      - order
      - notification
      - payment
      - recipe
    environment:
      PYTHONUNBUFFERED: 1

  ####################################
  # Get Delivery Status: The get delivery status service 
  ####################################
  get_delivery_status:
    build:
      context: ./
      dockerfile: get_delivery_status.Dockerfile
    image: douglastoh/get_delivery_status:uchef
    restart: always
    depends_on:
      - rabbitmq
    environment:
      rabbit_host: rabbitmq
      rabbit_port: 5672
      PYTHONUNBUFFERED: 1

  ####################################
  # Supermarket form: The surpermarket form service 
  ####################################
  supermarket_form:
    build:
      context: ./
      dockerfile: supermarket_form.Dockerfile
    image: douglastoh/supermarket_form:uchef
    restart: always
    depends_on:
      - rabbitmq
    environment:
      rabbit_host: rabbitmq
      rabbit_port: 5672
      PYTHONUNBUFFERED: 1
